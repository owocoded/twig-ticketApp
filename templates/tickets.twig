{% extends 'layout.html.twig' %}

{% block title %}Tickets - Ticket Management App{% endblock %}

{% block navbar %}
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
        <a class="navbar-brand" href="/">TicketApp</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/dashboard">Dashboard</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" href="/tickets">Tickets</a>
                </li>
            </ul>
            <ul class="navbar-nav">
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                        Hi, <span id="username">User</span>
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li><a class="dropdown-item" href="#" id="logoutLink">Logout</a></li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</nav>
{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Tickets</h2>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createTicketModal">Create Ticket</button>
    </div>
    
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Title</th>
                            <th>Status</th>
                            <th>Priority</th>
                            <th>Created Date</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="ticketsTableBody">
                        <tr>
                            <td colspan="6" class="text-center">No tickets found</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Create Ticket Modal -->
<div class="modal fade" id="createTicketModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Ticket</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="ticketForm">
                    <input type="hidden" id="ticketId">
                    <div class="mb-3">
                        <label for="title" class="form-label">Title</label>
                        <input type="text" class="form-control" id="title" name="title" required>
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <textarea class="form-control" id="description" name="description" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="status" class="form-label">Status</label>
                        <select class="form-select" id="status" name="status" required>
                            <option value="open">Open</option>
                            <option value="in_progress">In Progress</option>
                            <option value="closed">Closed</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="priority" class="form-label">Priority</label>
                        <select class="form-select" id="priority" name="priority">
                            <option value="low">Low</option>
                            <option value="medium" selected>Medium</option>
                            <option value="high">High</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveTicketBtn">Save Ticket</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Check authentication status
    const session = JSON.parse(localStorage.getItem('ticketapp_session') || '{}');
    if (!session.id) {
        window.location.href = '/auth/login';
        return;
    }
    
    // Get user info from localStorage
    const username = session.name || 'User';
    
    document.getElementById('username').textContent = username;
    
    // Load tickets data
    loadTickets();
    
    // Logout functionality
    document.getElementById('logoutLink').addEventListener('click', function(e) {
        e.preventDefault();
        localStorage.removeItem('ticketapp_session');
        window.location.href = '/';
    });
    
    // Save ticket functionality
    document.getElementById('saveTicketBtn').addEventListener('click', function() {
        const id = document.getElementById('ticketId').value;
        const title = document.getElementById('title').value;
        const description = document.getElementById('description').value;
        const status = document.getElementById('status').value;
        const priority = document.getElementById('priority').value;
        
        const tickets = JSON.parse(localStorage.getItem('ticketapp_tickets') || '[]');
        
        if (id) {
            // Update existing ticket
            const index = tickets.findIndex(t => t.id == id);
            if (index !== -1) {
                tickets[index] = {
                    ...tickets[index],
                    title,
                    description,
                    status,
                    priority,
                    updated_at: new Date().toISOString()
                };
            }
        } else {
            // Create new ticket
            const newTicket = {
                id: Date.now(),
                title,
                description,
                status,
                priority,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            };
            tickets.unshift(newTicket);
        }
        
        localStorage.setItem('ticketapp_tickets', JSON.stringify(tickets));
        
        // Reset form and close modal
        document.getElementById('ticketForm').reset();
        document.getElementById('createTicketModal').querySelector('.btn-close').click();
        
        // Reload tickets
        loadTickets();
    });
    
    function loadTickets() {
        const tickets = JSON.parse(localStorage.getItem('ticketapp_tickets') || '[]');
        const tableBody = document.getElementById('ticketsTableBody');
        
        if (tickets.length === 0) {
            tableBody.innerHTML = '<tr><td colspan="6" class="text-center">No tickets found</td></tr>';
            return;
        }
        
        tableBody.innerHTML = '';
        tickets.forEach(ticket => {
            // Format status badge
            let badgeClass = 'badge bg-secondary';
            if (ticket.status === 'open') badgeClass = 'badge bg-info';
            else if (ticket.status === 'in_progress') badgeClass = 'badge bg-warning text-dark';
            else if (ticket.status === 'closed') badgeClass = 'badge bg-success';
            
            // Format priority badge
            let priorityClass = 'badge bg-secondary';
            if (ticket.priority === 'low') priorityClass = 'badge bg-success';
            else if (ticket.priority === 'medium') priorityClass = 'badge bg-warning text-dark';
            else if (ticket.priority === 'high') priorityClass = 'badge bg-danger';
            
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${ticket.id}</td>
                <td>${ticket.title}</td>
                <td><span class="${badgeClass}">${ticket.status.replace('_', ' ')}</span></td>
                <td><span class="${priorityClass}">${ticket.priority}</span></td>
                <td>${new Date(ticket.created_at).toLocaleDateString()}</td>
                <td>
                    <button class="btn btn-sm btn-outline-primary me-1 edit-ticket" data-id="${ticket.id}">Edit</button>
                    <button class="btn btn-sm btn-outline-danger delete-ticket" data-id="${ticket.id}">Delete</button>
                </td>
            `;
            
            tableBody.appendChild(row);
        });
        
        // Add event listeners for edit buttons
        document.querySelectorAll('.edit-ticket').forEach(btn => {
            btn.addEventListener('click', function() {
                const id = this.getAttribute('data-id');
                editTicket(id);
            });
        });
        
        // Add event listeners for delete buttons
        document.querySelectorAll('.delete-ticket').forEach(btn => {
            btn.addEventListener('click', function() {
                const id = this.getAttribute('data-id');
                deleteTicket(id);
            });
        });
    }
    
    function editTicket(id) {
        const tickets = JSON.parse(localStorage.getItem('ticketapp_tickets') || '[]');
        const ticket = tickets.find(t => t.id == id);
        
        if (ticket) {
            document.getElementById('ticketId').value = ticket.id;
            document.getElementById('title').value = ticket.title;
            document.getElementById('description').value = ticket.description || '';
            document.getElementById('status').value = ticket.status;
            document.getElementById('priority').value = ticket.priority;
            
            const modal = new bootstrap.Modal(document.getElementById('createTicketModal'));
            modal.show();
        }
    }
    
    function deleteTicket(id) {
        if (confirm('Are you sure you want to delete this ticket?')) {
            let tickets = JSON.parse(localStorage.getItem('ticketapp_tickets') || '[]');
            tickets = tickets.filter(t => t.id != id);
            localStorage.setItem('ticketapp_tickets', JSON.stringify(tickets));
            
            loadTickets();
        }
    }
});
</script>
{% endblock %}