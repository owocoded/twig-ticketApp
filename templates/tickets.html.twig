{% extends 'base.html.twig' %}

{% block title %}Tickets - Ticket App{% endblock %}

{% block body %}
<nav class="navbar navbar-expand-md navbar-dark bg-primary">
    <div class="container" style="max-width: 1440px;">
        <a href="/" class="navbar-brand">TicketApp</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a href="/dashboard" class="nav-link">Dashboard</a>
                </li>
                <li class="nav-item">
                    <a href="/tickets" class="nav-link active">Tickets</a>
                </li>
            </ul>
            <button id="logoutBtn" class="btn btn-outline-light">Logout</button>
        </div>
    </div>
</nav>

<div class="container" style="max-width: 1440px;">
    <div class="row justify-content-center">
        <div class="col-12">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-center mb-4">
                <h1 class="mb-3 mb-md-0">Ticket Management</h1>
                <button id="createTicketBtn" class="btn btn-primary">Create Ticket</button>
            </div>
            
            <!-- Create/Edit Ticket Modal -->
            <div class="modal fade" id="ticketModal" tabindex="-1" aria-labelledby="ticketModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h2 class="modal-title" id="modalTitle">Create Ticket</h2>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <form id="ticketForm">
                            <div class="modal-body">
                                <input type="hidden" id="ticketId">
                                
                                <div class="mb-3">
                                    <label for="ticketTitle" class="form-label">Title *</label>
                                    <input type="text" id="ticketTitle" name="title" class="form-control form-control-lg" required>
                                    <div id="title-error" class="text-danger mt-1"></div>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="ticketDescription" class="form-label">Description</label>
                                    <textarea id="ticketDescription" name="description" class="form-control" rows="4"></textarea>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="ticketStatus" class="form-label">Status *</label>
                                    <select id="ticketStatus" name="status" class="form-select" required>
                                        <option value="">Select Status</option>
                                        <option value="open">Open</option>
                                        <option value="in_progress">In Progress</option>
                                        <option value="closed">Closed</option>
                                    </select>
                                    <div id="status-error" class="text-danger mt-1"></div>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="ticketPriority" class="form-label">Priority</label>
                                    <select id="ticketPriority" name="priority" class="form-select">
                                        <option value="low">Low</option>
                                        <option value="medium" selected>Medium</option>
                                        <option value="high">High</option>
                                    </select>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                <button type="submit" class="btn btn-primary">Save</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            
            <!-- Confirmation Modal -->
            <div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h2 class="modal-title">Confirm Deletion</h2>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to delete this ticket? This action cannot be undone.</p>
                        </div>
                        <div class="modal-footer">
                            <button id="cancelDeleteBtn" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button id="confirmDeleteBtn" class="btn btn-danger">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Tickets List -->
            <div id="ticketsList">
                <!-- Tickets will be loaded here dynamically -->
            </div>
        </div>
    </div>
</div>

<script>
let currentTickets = [];
let ticketToDelete = null;

// Load tickets from localStorage
function loadTickets() {
    currentTickets = JSON.parse(localStorage.getItem('ticketapp_tickets')) || [];
    renderTickets();
}

// Render tickets list
function renderTickets() {
    const ticketsList = document.getElementById('ticketsList');
    
    if (currentTickets.length === 0) {
        ticketsList.innerHTML = '<div class="card text-center shadow-sm border-0 rounded-3"><div class="card-body"><p class="card-text">No tickets found. Create your first ticket!</p></div></div>';
        return;
    }
    
    ticketsList.innerHTML = currentTickets.map(ticket => `
        <div class="card mb-4 shadow-sm border-0 rounded-3">
            <div class="card-body">
                <div class="d-flex flex-column flex-md-row justify-content-between align-items-start">
                    <div class="flex-grow-1">
                        <h3 class="card-title h5">${ticket.title}</h3>
                        <p class="card-text">${ticket.description || 'No description provided'}</p>
                        <div class="d-flex flex-wrap gap-2 mt-2">
                            <span class="status ${ticket.status} badge rounded-pill">
                                ${ticket.status.replace('_', ' ')}
                            </span>
                            <span class="priority-${ticket.priority} badge text-bg-warning rounded-pill">Priority: ${ticket.priority}</span>
                            <small class="text-muted">Created: ${new Date(ticket.created_at).toLocaleDateString()}</small>
                        </div>
                    </div>
                    <div class="d-flex gap-2 mt-2 mt-md-0">
                        <button onclick="editTicket(${ticket.id})" class="btn btn-sm btn-outline-primary">Edit</button>
                        <button onclick="deleteTicket(${ticket.id})" class="btn btn-sm btn-outline-danger">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    `).join('');
}

// Show create ticket modal
document.getElementById('createTicketBtn').addEventListener('click', function() {
    document.getElementById('modalTitle').textContent = 'Create Ticket';
    document.getElementById('ticketForm').reset();
    document.getElementById('ticketId').value = '';
    document.getElementById('title-error').textContent = '';
    document.getElementById('status-error').textContent = '';
    
    // Initialize the modal using Bootstrap's JavaScript API
    const modal = new bootstrap.Modal(document.getElementById('ticketModal'));
    modal.show();
});

// Handle form submission
document.getElementById('ticketForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    // Clear previous errors
    document.getElementById('title-error').textContent = '';
    document.getElementById('status-error').textContent = '';
    
    const id = document.getElementById('ticketId').value;
    const title = document.getElementById('ticketTitle').value;
    const description = document.getElementById('ticketDescription').value;
    const status = document.getElementById('ticketStatus').value;
    const priority = document.getElementById('ticketPriority').value;
    
    // Validation
    let isValid = true;
    
    if (!title) {
        document.getElementById('title-error').textContent = 'Title is required';
        isValid = false;
    }
    
    if (!status) {
        document.getElementById('status-error').textContent = 'Status is required';
        isValid = false;
    }
    
    // Validate status values
    const validStatuses = ['open', 'in_progress', 'closed'];
    if (status && !validStatuses.includes(status)) {
        document.getElementById('status-error').textContent = 'Status must be open, in_progress, or closed';
        isValid = false;
    }
    
    if (!isValid) return;
    
    if (id) {
        // Update existing ticket
        const index = currentTickets.findIndex(ticket => ticket.id == id);
        if (index !== -1) {
            currentTickets[index] = {
                ...currentTickets[index],
                title,
                description,
                status,
                priority,
                updated_at: new Date().toISOString()
            };
        }
    } else {
        // Create new ticket
        const newTicket = {
            id: Date.now(),
            title,
            description,
            status,
            priority,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        };
        currentTickets.unshift(newTicket);
    }
    
    // Save to localStorage
    localStorage.setItem('ticketapp_tickets', JSON.stringify(currentTickets));
    
    // Close modal and refresh list
    const modal = bootstrap.Modal.getInstance(document.getElementById('ticketModal'));
    modal.hide();
    loadTickets();
    
    showToast(id ? 'Ticket updated successfully!' : 'Ticket created successfully!', 'success');
});

// Close modal button
document.getElementById('cancelBtn').addEventListener('click', function() {
    const modal = bootstrap.Modal.getInstance(document.getElementById('ticketModal'));
    modal.hide();
});

// Edit ticket
function editTicket(id) {
    const ticket = currentTickets.find(t => t.id == id);
    if (!ticket) return;
    
    document.getElementById('modalTitle').textContent = 'Edit Ticket';
    document.getElementById('ticketId').value = ticket.id;
    document.getElementById('ticketTitle').value = ticket.title;
    document.getElementById('ticketDescription').value = ticket.description || '';
    document.getElementById('ticketStatus').value = ticket.status;
    document.getElementById('ticketPriority').value = ticket.priority || 'medium';
    
    const modal = new bootstrap.Modal(document.getElementById('ticketModal'));
    modal.show();
}

// Delete ticket
function deleteTicket(id) {
    ticketToDelete = id;
    const confirmModal = new bootstrap.Modal(document.getElementById('confirmModal'));
    confirmModal.show();
}

// Confirm delete
document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
    if (ticketToDelete !== null) {
        currentTickets = currentTickets.filter(ticket => ticket.id != ticketToDelete);
        localStorage.setItem('ticketapp_tickets', JSON.stringify(currentTickets));
        
        loadTickets();
        const confirmModal = bootstrap.Modal.getInstance(document.getElementById('confirmModal'));
        confirmModal.hide();
        ticketToDelete = null;
        
        showToast('Ticket deleted successfully!', 'success');
    }
});

// Cancel delete
document.getElementById('cancelDeleteBtn').addEventListener('click', function() {
    const confirmModal = bootstrap.Modal.getInstance(document.getElementById('confirmModal'));
    confirmModal.hide();
    ticketToDelete = null;
});

// Logout function
document.getElementById('logoutBtn').addEventListener('click', function() {
    localStorage.removeItem('ticketapp_session');
    window.location.href = '/auth/login';
});

// Load tickets when page loads
document.addEventListener('DOMContentLoaded', function() {
    // Check if user is authenticated
    const token = localStorage.getItem('ticketapp_session');
    if (!token) {
        window.location.href = '/auth/login';
        return;
    }
    
    loadTickets();
});
</script>
{% endblock %}